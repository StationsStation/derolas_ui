name: publish
'on':
  push:
    tags:
      - v*
jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: '--target aarch64-apple-darwin'
          - platform: macos-latest
            args: '--target x86_64-apple-darwin'
          - platform: ubuntu-22.04
            args: ''
          - platform: ubuntu-22.04-arm
            args: ''
            docker_platform: linux/arm64
          - platform: ubuntu-22.04
            args: ''
            docker_platform: linux/amd64
          - platform: windows-latest
            args: ''
    runs-on: ${{ matrix.platform }}
    env:
      RELEASE_VERSION: 0.1.43
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        run: >
          sudo apt-get update

          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev
          librsvg2-dev patchelf
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: v22.15.0
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: >-
            ${{ matrix.platform == 'macos-latest' &&
            'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri -> target
      - name: install frontend dependencies
        run: yarn install
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ env.RELEASE_VERSION }}
          releaseName: Release __VERSION__
          releaseBody: See the assets to download this version and install.
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
      - name: Package Linux binary
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        id: package-linux
        shell: bash
        run: >
          set -euo pipefail


          ARCH="$(uname -m)"

          if [ "$ARCH" = "aarch64" ]; then
            SUFFIX="arm64"
          else
            SUFFIX="amd64"
          fi


          BIN_NAME="agent_runner_${RELEASE_VERSION}_${SUFFIX}"

          TAR_NAME="${BIN_NAME}.tar.gz"


          # Ensure the compiled binary exists; adjust the path if you build
          elsewhere

          test -x ./src-tauri/target/release/agent_runner


          cp ./src-tauri/target/release/agent_runner "$BIN_NAME"

          tar -czf "$TAR_NAME" "$BIN_NAME"


          echo "file=$TAR_NAME" >> "$GITHUB_OUTPUT"
      - name: Upload Linux binary to GitHub release
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          files: ${{ steps.package-linux.outputs.file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-docker:
    needs: publish-tauri
    env:
      DOCKER_BUILDKIT: 1
      RELEASE_VERSION: 0.1.43
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            args: '--target x86_64-apple-darwin'
            docker_platform: linux/amd64
            tag_suffix: darwin-amd64
          - os: ubuntu-22.04
            args: '--target x86_64-unknown-linux-gnu'
            docker_platform: linux/amd64
            tag_suffix: linux-amd64
          - os: ubuntu-22.04
            args: '--target aarch64-unknown-linux-gnu'
            docker_platform: linux/arm64
            tag_suffix: linux-arm64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & push multi-arch
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
            ${{ env.IMAGE_NAME }}:latest
