# This is a basic workflow to help you get started with Actions

name: Code Quality
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-python:
    strategy:
      fail-fast: false
      matrix:
        python-version:
        # - "3.9"
        - "3.11"
        poetry-version: ["1.8.3"]
        os: [ubuntu-22.04,]
    runs-on: ${{ matrix.os }}
    env:
      PYTHONPATH: .
      PYTHONWARNINGS: ignore
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/my-custom-path
          installer-parallel: true

      - name: Install Project
        run: |
            make install

      - name: Format
        run: |
            make fmt

      - name: Lint
        run: |
            make lint

      - name: Tests
        run: |
            make test

  check-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            docker_platform: 'linux/arm64,linux/amd64'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            docker_platform: 'linux/arm64,linux/amd64'
          - platform: 'ubuntu-22.04'
            args: ''
            docker_platform: 'linux/amd64'
          - platform: 'windows-latest'
            args: ''
            docker_platform: 'windows/amd64' # adjust based on your image build support

    runs-on: ${{ matrix.platform }}
    defaults:
    env:
      RELEASE_VERSION: 0.1.21
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf


      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'v22.15.0'
          cache: 'yarn' # Set this to npm, yarn or pnpm.
          cache-dependency-path: yarn.lock


      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use.

      - name: Check
        run: |
          yarn run check


      - name: Build
        run: |
          yarn run tauri build