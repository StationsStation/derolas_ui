/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user by Ethereum address */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["Address"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A user object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get client metrics for a user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["Address"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Metrics data for the user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClientMetrics"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all registered providers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of providers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Provider"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brokers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all brokers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of brokers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Broker"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List supported chains */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of chains */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Chain"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Ethereum address */
        Address: string;
        /** @description Provider performance metrics used to calculate penalty score. */
        Score: {
            latencyMs?: number;
            latencyIdealMs?: number;
            /** Format: float */
            successRate?: number;
            throughput?: number;
            throughputIdeal?: number;
            outstandingRequests?: number;
            outstandingRequestsIdeal?: number;
            weightLatency?: number;
            weightSuccessRate?: number;
            weightThroughput?: number;
            weightOutstandingRequests?: number;
        };
        /** @description Performance metrics related to the user's request behavior. */
        ClientMetrics: {
            totalRequests?: number;
            successfulResponses?: number;
            /** Format: float */
            successRate?: number;
        };
        User: {
            id?: components["schemas"]["Address"];
            metrics?: components["schemas"]["ClientMetrics"];
        };
        Provider: {
            id?: components["schemas"]["Address"];
            /** @enum {string} */
            type?: "proxy" | "node" | "validator";
            supportedChains?: string[];
            score?: components["schemas"]["Score"];
            pricePerMillionRequests?: number;
        };
        Broker: {
            id?: components["schemas"]["Address"];
            stakedValue?: number;
            routingScore?: number;
            managedProviders?: components["schemas"]["Address"][];
        };
        Chain: {
            id?: string;
            name?: string;
            rpcEndpoints?: string[];
            activeBrokers?: components["schemas"]["Address"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
